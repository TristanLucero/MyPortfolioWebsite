{"version":3,"sources":["App.js","serviceWorker.js","components/Projects.js","components/Resume.js","index.js"],"names":["App","className","href","class","style","fontSize","fontWeight","border","alt","src","width","height","Boolean","window","location","hostname","match","Projects","to","Component","Resume","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAkDeA,MAzCf,WACE,OACE,yBAAKC,UAAU,mBAEb,yBAAKA,UAAU,gBACX,uBAAGA,UAAU,iBAAiBC,KAAK,yDACjC,uBAAGC,MAAM,0BAAT,eACA,uBAAGF,UAAU,kBAAb,aAEF,uBAAGA,UAAU,iBAAiBC,KAAK,oCACjC,uBAAGC,MAAM,0BAAT,gBACA,uBAAGF,UAAU,kBAAb,YAGN,2BACI,uBAAGA,UAAU,YACX,uBAAGA,UAAU,cAAb,iBACA,uBAAGA,UAAU,kBAAb,yCAAoE,6BAApE,uCAA6G,6BAA7G,wCACA,6BACA,6BACA,uBAAGA,UAAU,gBAAb,gEAGN,yBAAKA,UAAU,oBACb,uBAAGG,MAAO,CAAEC,SAAU,OAAQC,WAAY,SAA1C,aACA,uBAAGL,UAAU,iBAAb,oFAEA,6BACA,6BAHA,SAKI,uBAAGC,KAAK,sDACR,yBAAKK,OAAO,IAAIC,IAAI,mBAAmBC,IAAI,yGAAyGC,MAAM,KAAKC,OAAO,QAEtK,yBAAKV,UAAU,eAAeQ,IAAI,sCAGxC,uBAAGR,UAAU,eAAb,2DCjCcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDCOSC,E,uKApBP,OACI,yBAAKhB,UAAU,mBAEX,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAMiB,GAAG,IAAIjB,UAAU,kBACnB,uBAAGE,MAAM,0BAAT,SAEJ,kBAAC,IAAD,CAAMe,GAAG,UAAUjB,UAAU,kBACzB,uBAAGE,MAAM,0BAAT,gBAEJ,kBAAC,IAAD,CAAMe,GAAG,YAAYjB,UAAU,kBAC3B,uBAAGE,MAAM,0BAAT,uB,GAbDgB,aCsBRC,E,uKApBP,OACI,yBAAKnB,UAAU,mBAEX,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAMiB,GAAG,IAAIjB,UAAU,kBACnB,uBAAGE,MAAM,0BAAT,SAEJ,kBAAC,IAAD,CAAMe,GAAG,UAAUjB,UAAU,kBACzB,uBAAGE,MAAM,0BAAT,gBAEJ,kBAAC,IAAD,CAAMe,GAAG,YAAYjB,UAAU,kBAC3B,uBAAGE,MAAM,0BAAT,uB,GAbHgB,aCOrBE,IAASC,OACP,kBAAC,IAAD,KACE,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,IACjC,kBAAC,IAAD,CAAOwB,KAAK,YAAYC,UAAWR,IACnC,kBAAC,IAAD,CAAOO,KAAK,UAAUC,UAAWL,MAGxCM,SAASC,eAAe,SHiHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ebce7cc2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport './App.css';\nimport { Link } from 'react-router-dom';\n\nimport Carousel from '@brainhubeu/react-carousel';\nimport '@brainhubeu/react-carousel/lib/style.css';\n\nfunction App() {\n  return (\n    <div className=\"main-background\">\n      {/*Buttons on top left hand side*/}\n      <div className=\"button-group\">\n          <a className=\"buttons-images\" href=\"https://www.linkedin.com/in/tristan-lucero-9120881b1/\">\n            <i class=\"material-icons md-dark\">description</i>\n            <p className=\"topbutton-text\">LinkedIn</p>\n          </a>\n          <a className=\"buttons-images\" href=\"https://github.com/TristanLucero\">\n            <i class=\"material-icons md-dark\">build_circle</i>\n            <p className=\"topbutton-text\">Github</p>\n          </a>\n      </div>\n      <p>\n          <p className=\"big-text\">\n            <p className=\"hello-text\">Hello! ツ</p>\n            <p className=\"paragraph-text\">I'm Tristan Lucero, a Computer Science<br/> undergraduate student who is highly<br/> interested in software engineering.</p>\n            <br/>\n            <br/>\n            <p className=\"contact-info\">Contact info: 979-250-2645 | tristanandrewlucero@gmail.com</p>\n          </p>\n      </p>\n      <div className='experience-panel'>\n        <p style={{ fontSize: \"25px\", fontWeight: \"bold\" }}>Projects:</p>\n        <p className='projects-text'>⚫ Portfolio Website: A simple portfolio website, made with React JS and CSS.\n        \n        <br/>\n        <br/> \n            Github  \n            <a href=\"https://github.com/TristanLucero/portfolio-website\">\n            <img border=\"0\" alt=\"github project 1\" src=\"https://www.freepngimg.com/thumb/github/62620-github-network-icons-computer-graphics-logo-portable.png\" width=\"30\" height=\"30\" />\n            </a>\n            <img className='project1-img' src=\"https://i.imgur.com/v0Yy8LF.png\"></img>\n        </p>\n      </div>\n      <p className=\"footer-text\">Tristan Lucero's Portfolio Website - Built with React</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\n\nclass Projects extends Component {\n    render() {\n        return (\n            <div className=\"main-background\">\n                {/*Buttons on top left hand side*/}\n                <div className=\"button-group\">\n                    <Link to=\"/\" className=\"buttons-images\">\n                        <i class=\"material-icons md-dark\">face</i>\n                    </Link>\n                    <Link to=\"/resume\" className=\"buttons-images\">\n                        <i class=\"material-icons md-dark\">description</i>\n                    </Link>\n                    <Link to=\"/Projects\" className=\"buttons-images\">\n                        <i class=\"material-icons md-dark\">build_circle</i>\n                    </Link>\n                </div>\n\n            </div>\n          );\n    }\n}\n\nexport default Projects\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\n\nclass Resume extends Component {\n    render() {\n        return (\n            <div className=\"main-background\">\n                {/*Buttons on top left hand side*/}\n                <div className=\"button-group\">\n                    <Link to=\"/\" className=\"buttons-images\">\n                        <i class=\"material-icons md-dark\">face</i>\n                    </Link>\n                    <Link to=\"/resume\" className=\"buttons-images\">\n                        <i class=\"material-icons md-dark\">description</i>\n                    </Link>\n                    <Link to=\"/Projects\" className=\"buttons-images\">\n                        <i class=\"material-icons md-dark\">build_circle</i>\n                    </Link>\n                </div>\n\n            </div>\n          );\n    }\n}\n\nexport default Resume\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Projects from './components/Projects';\nimport Resume from './components/Resume';\n\n\nReactDOM.render((\n  <BrowserRouter>\n    <div>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/Projects\" component={Projects}/>\n        <Route path=\"/Resume\" component={Resume}/>\n   </div>\n </BrowserRouter>),\n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}